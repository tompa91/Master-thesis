/*
 * Copyright (c) 2015-2016, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== uartecho.c ========
 */

/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/System.h>

/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/sysbios/knl/Event.h>


/* TI-RTOS Header files */
#include <ti/drivers/PIN.h>
#include <ti/drivers/UART.h>

/* Example/Board Header files */
#include "Board.h"

#include <stdint.h>
#include <string.h>

#define readMode
#define TASKSTACKSIZE     768
#define UART_EVENT_WRITE_A  (uint16_t)(1 << 0)
#define UART_EVENT_WRITE_B  (uint16_t)(1 << 1)
#define UART_EVENT_WRITE_C  (uint16_t)(1 << 2)

Task_Struct task0Struct;
Task_Struct task1Struct;
Char task0Stack[TASKSTACKSIZE];
Char task1Stack[TASKSTACKSIZE];

/* Global memory storage for a PIN_Config table */
static PIN_State ledPinState;

Event_Struct uartEvent;
static Event_Handle uartEventHandle;

/*
 * Application LED pin configuration table:
 *   - All LEDs board LEDs are off.
 */


PIN_Config ledPinTable[] = {
    Board_LED1 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    Board_LED2 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    PIN_TERMINATE
};

PIN_Handle ledPinHandle;

/* Open LED pins */
ledPinHandle = PIN_open(&ledPinState, ledPinTable);
//if(!ledPinHandle) {
//    System_abort("Error initializing board LED pins\n");
//}

/*
 *  ======== echoFxn ========
 *  Task for this function is created statically. See the project's .cfg file.
 */

Void readFxn(UArg arg0, UArg arg1)
{

    while(1)
    {
        char sendData[13];

        uint32_t cEvents = Event_pend(uartEventHandle, 0, UART_EVENT_WRITE_A | UART_EVENT_WRITE_B | UART_EVENT_WRITE_C, BIOS_WAIT_FOREVER);

        switch(cEvents)
        {
            case UART_EVENT_WRITE_A :
                strcpy(sendData,"Hello World A");
                //UART_write(uart, sendData, sizeof(sendData));
                break;

            case UART_EVENT_WRITE_B :
                strcpy(sendData,"Hello World B");
                //PIN_setOutputValue(ledPinHandle, Board_LED1, 1);    //Green
                //PIN_setOutputValue(ledPinHandle, Board_LED0, 0);    //Red
                //UART_write(uart, sendData, sizeof(sendData));
                break;

            case UART_EVENT_WRITE_C :
                strcpy(sendData,"Hello World C");
                //PIN_setOutputValue(ledPinHandle, Board_LED1, 0);    //Green
                //PIN_setOutputValue(ledPinHandle, Board_LED0, 1);    //Red
                //UART_write(uart, sendData, sizeof(sendData));
                break;
        }
    }
}

Void uartFxn(UArg arg0, UArg arg1)
{
    UART_Handle uart;
    UART_Params uartParams;

    /* Create a UART with data processing off. */
    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_BINARY;
    uartParams.readDataMode = UART_DATA_BINARY;
    uartParams.readReturnMode = UART_RETURN_FULL;
    uartParams.readEcho = UART_ECHO_OFF;
    uartParams.baudRate = 9600;
    uart = UART_open(Board_UART0, &uartParams);

    if (uart == NULL) {
        System_abort("Error opening the UART");
    }

    /* Loop forever echoing */
#ifdef readMode


    while(1)
    {
        uint8_t i = 0;
        char input;
        char data[128];

        while(1)
        {
            UART_read(uart, &input, 1);
            *(data+i) = input;

            if(*(data+i) == '\0')
            {
                i++;
                break;
            }
            else
                i++;
        }

        if(strncmp(data, "r", 1) == 0)
        {
            /*
            if(strcmp(data, "green") == 0)
            {
                PIN_setOutputValue(ledPinHandle, Board_LED1, 1);    //Green
                PIN_setOutputValue(ledPinHandle, Board_LED0, 0);    //Red
            }

            else if(strcmp(data, "red") == 0)
            {
                PIN_setOutputValue(ledPinHandle, Board_LED1, 0);    //Green
                PIN_setOutputValue(ledPinHandle, Board_LED0, 1);    //Red
            }
            */
        }

        else if(strncmp(data, "w", 1) == 0)
        {

            if(strcmp(data+1, "A") == 0)
            {
                Event_post(uartEventHandle, UART_EVENT_WRITE_A);
            }

            else if(strcmp(data+1, "B") == 0)
            {
                Event_post(uartEventHandle, UART_EVENT_WRITE_B);
            }

            else if(strcmp(data+1, "C") == 0)
                Event_post(uartEventHandle, UART_EVENT_WRITE_C);
        }
    }
#endif
#ifdef writeMode
    char inputG = 'g';
    char inputR = 'r';


    while (1)
    {
        UART_write(uart, &inputG, sizeof(inputG));
        PIN_setOutputValue(ledPinHandle, Board_LED1, 1);    //Green
        PIN_setOutputValue(ledPinHandle, Board_LED0, 0);    //Red
        Task_sleep(50000);

        UART_write(uart, &inputR, sizeof(inputR));
        PIN_setOutputValue(ledPinHandle, Board_LED1, 0);    //Green
        PIN_setOutputValue(ledPinHandle, Board_LED0, 1);    //Red
        Task_sleep(50000);
    }

#endif


}

/*
 *  ======== main ========
 */
int main(void)
{
    Task_Params taskParams;

    /* Call board init functions */
    Board_initGeneral();
    Board_initUART();

    /* Initialize event handler */
    Event_Params eventParam;
    Event_Params_init(&eventParam);
    Event_construct(&uartEvent, &eventParam);
    uartEventHandle = Event_handle(&uartEvent);

    /* Construct BIOS objects */
    /* Read from CC2650 to CC1310 */
    Task_Params_init(&taskParams);
    taskParams.stackSize = TASKSTACKSIZE;
    taskParams.stack = &task0Stack;
    Task_construct(&task0Struct, (Task_FuncPtr)uartFxn, &taskParams, NULL);

    /* Write from CC1310 to CC2650 UART */
    Task_Params_init(&taskParams);
    taskParams.stackSize = TASKSTACKSIZE;
    taskParams.stack = &task1Stack;
    Task_construct(&task1Struct, (Task_FuncPtr)readFxn, &taskParams, NULL);

    /* This example has logging and many other debug capabilities enabled */
    System_printf("This example does not attempt to minimize code or data "
                  "footprint\n");
    System_flush();

    System_printf("Starting the UART Echo example\nSystem provider is set to "
                  "SysMin. Halt the target to view any SysMin contents in "
                  "ROV.\n");
    /* SysMin will only print to the console when you call flush or exit */
    System_flush();

    /* Start BIOS */
    BIOS_start();

    return (0);
}
